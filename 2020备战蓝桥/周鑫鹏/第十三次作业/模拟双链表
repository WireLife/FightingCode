#include<iostream>
using namespace std;
typedef struct node
{
	int num;
	node* prev;
	node* next;
}node;
typedef struct list
{
	int size;
	node* begin;
	node* end;
}list;
node* Init(node* p1, node* p2, int n)
{
	node* p3 = new node;
	p3->prev = p1;
	p3->next = p2;
	p3->num = n;
	return p3;
}
void inserttop(list* p,int n)			//头部插入元素
{
	node* a = new node;
	a->next = p->begin;
	p->begin->prev = a;
	p->begin = a;
	a->prev = NULL;
	a->num = n;
	p->size++;
}
void insertbefore(list* p, int n)		//尾部插入元素
{
	node* a = new node;
	p->end->next = a;
	a->prev = p->end;
	p->end = a;
	a->next = NULL;
	a->num = n;
	p->size++;
}
void insertback(list*p,node* n1,int n)//某个元素背后插入元素
{
	node* a = new node;
	n1->next->prev = a;
	a->next = n1->next;
	a->prev = n1;
	n1->next = a;
	a->num = n;
	p->size++;
}
void remove(list*p,node* n)
{
	n->prev->next = n->next;
	n->next->prev = n->prev;
	p->size--;
}
node* find(list* p, int n)			//查找元素，如果找到返回节点指针
{
	node* it = p->begin;
	while (it != NULL)
	{
		if (it->num == n)
			break;
		it = it->next;
	}
	return it;
}
void size(list* p)
{
	cout << p->size << endl;
}
void ttraversal(list* p)
{
	node* p1 = p->begin;
	if (p1 = NULL)
		cout << "空表" << endl;
	while (p1 != NULL)
	{
		p1 = p1->next;
	}
}
void etravesal(list* p)
{
	node* p1 = p->end;
	while (p1 != NULL)
	{
		p1 = p1->prev;
	}
}
void modify(node* n, int a)
{
	n->num = a;
}
int main()
{
	int a[] = { 1,3,2,4,5 };
	node* n1=new node;
	list* p = new list;
	node* p1;
	n1->next = NULL;
	n1->prev = NULL;
	n1->num = 1;
	p->begin = n1;
	p->end = n1;
	p->size = 1;
	for (int i = 1; i < 5; i++)
	{
		p1=Init(p->end, NULL, a[i]);
		p->end->next = p1;
		p->end = p1;
		p->size++;
	}
}
