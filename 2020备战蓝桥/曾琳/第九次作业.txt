第9次作业
1、求解逆波兰表达式的值（信息学奥赛一本通-T1198）
逆波兰表达式是一种把运算符前置的算术表达式，例如普通的表达式2 + 3的逆波兰表示法为+ 2 3。逆波兰表达式的优点是运算符之间不必有优先级关系，也不必用括号改变运算次序，例如(2 + 3) * 4的逆波兰表示法为* + 2 3 4。本题求解逆波兰表达式的值，其中运算符包括+ - * /四个。
输入
输入为一行，其中运算符和运算数之间都用空格分隔，运算数是浮点数。
输出
输出为一行，表达式的值。
可直接用printf("%f\n", v)输出表达式的值v。
样例输入
* + 11.0 12.0 + 24.0 35.0
样例输出
1357.000000
 
2、将二进制字符串转为16进制输出
输入一个二进制数字组成的字符串，求变换为十六进制数据输出。

3、数的计数（信息学奥赛一本通-T1316）
求找出具有下列性质数的个数（包括输入的自然数n）。先输入一个自然数n（n≤1000），然后对此自然数按照如下方法进行处理：
1）不作任何处理；
2）在它的左边加上一个自然数，但该自然数不能超过原数的一半；
3）加上数后，继续按此规则进行处理，直到不能再加自然数为止。
【输入】
自然数n（n≤1000）。
【输出】
满足条件的数。
【输入样例】
6
【输出样例】
6
提示：满足条件的数为 6、16、26、126、36、136等6个数

4、Pell数列
Pell数列a1,a2,a3,...的定义:
a1=1
a2=2
...
an=2an−1+an−2(n>2)。
给出一个正整数k，要求Pell数列的第k项是多少。
【输入】
第1行是测试数据的组数 n，后面跟着 n 行输入。每组测试数据占 1 行，包括一个正整数k(1≤k<1000000)。
【输出】
【题目描述】
    我们要求找出具有下列性质数的个数（包括输入的自然数n）。先输入一个自然数n（n≤1000），然后对此自然数按照如下方法进行处理：
1）不作任何处理；
2）在它的左边加上一个自然数，但该自然数不能超过原数的一半；
3）加上数后，继续按此规则进行处理，直到不能再加自然数为止。
【输入】
自然数n（n≤1000）。
【输出】
满足条件的数。
【输入样例】
6
【输出样例】
6
提示：满足条件的数为 6、16、26、126、36、136
n 行，每行输出对应一个输入。输出应是一个非负整数。
【输入样例】
2
1
8
【输出样例】
1
408

5、放苹果（信息学奥赛一本通-T1222）
把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？（用K表示）5，1，1和1，5，1 是同一种分法。
【输入】
第一行是测试数据的数目t（0 ≤ t ≤ 20）。以下每行均包含二个整数M和N，以空格分开。1≤M，N≤10。
【输出】
对输入的每组数据M和N，用一行输出相应的K。
【输入样例】
1
7 3
【输出样例】
8
6、分数求和（信息学奥赛一本通-T1209）
输入n个分数并对他们求和，并用最简形式表示。所谓最简形式是指：分子分母的最大公约数为1/1；若最终结果的分母为1，则直接用整数表示。如：5/6、10/3均是最简形式，而3/6需要化简为1/2,3/1需要化简为3。分子和分母均不为0，也不为负数。
【输入】
第一行是一个整数n，表示分数个数，1≤n≤10；
接下来n行，每行一个分数，用"p/q"的形式表示，不含空格，p，q均不超过10。
【输出】
输出只有一行，即最终结果的最简形式。若为分数，用"p/q"的形式表示。
【输入样例】
2
1/2
1/3
【输出样例】
5/6

7、判断元素是否存在（信息学奥赛一本通-T1211）
有一个集合M是这样生成的：(1) 已知k是集合M的元素； (2) 如果y是M的元素，那么，2y+1和3y+1都是M的元素；(3) 除了上述二种情况外，没有别的数能够成为M的一个元素。
问题：任意给定k和x，请判断x是否是M的元素。这里的k是无符号整数，x 不大于 100000，如果是，则输出YES，否则，输出NO。
【输入】
输入整数 k 和 x, 逗号间隔。
【输出】
如果是，则输出 YES，否则，输出NO。
【输入样例】
0,22
【输出样例】
YES
8、洪水
有一个n行m列的网格，每个格子是边长为10米的正方形，网格四周是无限高的墙壁，第i行第j列每个格子的海拔高度为h[i][j]。现在网格中有T立方米的水，请你计算网格中的水平面的海拔高度，以及有水格子数目。注意，在网格中，所有有水格子的水平面的海拔高度相同，所以有水格子的数量为海拔高度严格小于水平面高度的格子数目。
 【输入格式】  
  　　第一行整数n和m，表示网格有n行m列。
　　接下来是n行m列的矩阵，第i行第j列的数字为对应格子的海拔高度h[i][j]。
　　最后一行为整数T，表示网格中水的体积。
 【输出格式】  
 　　第一行为一个实数，表示水平面的海拔高度，保留2位小数。
　　第二行为一个整数，表示有水格子的数目。
 
 【输入样例】   
   3 3
25 37 45
51 12 34
94 83 27
10000 
  【输出样例】  
   46.67
6
  【数据范围】  
   1<=n,m<=30 
0<=h[i][j]<=1 000 000
1<=T<=1 000 000 000
9、习题4-4 骰子涂色  
输入两个骰子，判断二者是否等价。每个骰子用6个字母表示。
题目规定了正方体的六个面的序号：从1-6，按照这个需要提供涂色序列


案例展示

上面是提供的两个骰子，我们将第二个骰子向右转90度（一个面），可以得到第一个骰子的样式。故输出TRUE
（三）样例输入
Rbgggr  rggbgr　　//一共3局，每一行是一局，前六个字母是对应第一个骰子，后六个字母对应第二个骰子
rrrbbbrrbbbr
rbgrbgrrrrrg
（四）样例输出
TRUE
FALSE
FALSE








以下题目主要来自算法竞赛入门经典第二版，难度较大，根据自己情况选做，每题后附网上下载资料供参考。

10、追踪电子表格中的单元格。
在电子表格中的数据都存储在单元格中，它是按行和列（R）（C）。一些在电子表格上的操作可以应用于单个单元格（研发），而其他的可以应用于整个行或列。典型的单元操作包括插入和删除行或列和交换单元格内容。一些电子表格允许用户标记为删除行或列的集合，因此，整个集合可以被删除一次。一些（不寻常的）电子表格允许用户标记的行或列的插入太多。在每一个标记行或列前插入新的行或列的插入命令结果。例如，假设用户在左边的电子表格中的1和5标记为删除。该电子表格，然后缩小到右边的一个。

如果用户随后标记列3、7、6和9为删除，该电子表格将缩小到该列。

您必须编写跟踪软件，以确定数据的最终位置，在数据表中，结果从行、列和交换操作类似于上面的图表所示。
 
样例输入：
7 9
5
DR 2 1 5
DC 4 3 6 7 9
IC 1 3
IR 2 2 4
EX 1 2 6 5
4
4 8
5 5
7 8
6 5
0 0
样例输出：
Spreadsheet #1
Cell data in (4,8) moved to (4,6)
Cell data in (5,5) GONE
Cell data in (7,8) moved to (7,6)
Cell data in (6,5) moved to (1,2)

#include<stdio.h>
#include<string.h>
#define maxd 100
#define BIG 10000
int r, c, n, d[maxd][maxd], d2[maxd][maxd], ans[maxd][maxd], cols[maxd];

void copy(char type, int p, int q) {
  if(type == 'R') {
    for(int i = 1; i <= c; i++)
      d[p][i] = d2[q][i];
  } else {
    for(int i = 1; i <= r; i++)
      d[i][p] = d2[i][q];
  }
}

void del(char type) {
  memcpy(d2, d, sizeof(d));
  int cnt = type == 'R' ? r : c, cnt2 = 0;
  for(int i = 1; i <= cnt; i++) {
    if(!cols[i]) copy(type, ++cnt2, i);
  }
  if(type == 'R') r = cnt2; else c = cnt2;
}

void ins(char type) {
  memcpy(d2, d, sizeof(d));
  int cnt = type == 'R' ? r : c, cnt2 = 0;
  for(int i = 1; i <= cnt; i++) {
    if(cols[i]) copy(type, ++cnt2, 0);
    copy(type, ++cnt2, i);
  }
  if(type == 'R') r = cnt2; else c = cnt2;
}

int main() {
  int r1, c1, r2, c2, q, kase = 0;
  char cmd[10];
  memset(d, 0, sizeof(d));
  while(scanf("%d%d%d", &r, &c, &n) == 3 && r) {
    int r0 = r, c0 = c;
    for(int i = 1; i <= r; i++)
      for(int j = 1; j <= c; j++)
        d[i][j] = i*BIG + j;
    while(n--) {
      scanf("%s", cmd);
      if(cmd[0] == 'E') {
        scanf("%d%d%d%d", &r1, &c1, &r2, &c2);
        int t = d[r1][c1]; d[r1][c1] = d[r2][c2]; d[r2][c2] = t;
      } else {
        int a, x;
        scanf("%d", &a);
        memset(cols, 0, sizeof(cols));
        for(int i = 0; i < a; i++) { scanf("%d", &x); cols[x] = 1; }
        if(cmd[0] == 'D') del(cmd[1]); else ins(cmd[1]);
      }
    }
    memset(ans, 0, sizeof(ans));
    for(int i = 1; i <= r; i++)
      for(int j = 1; j <= c; j++) {
        ans[d[i][j]/BIG][d[i][j]%BIG] = i*BIG+j;
      }
    if(kase > 0) printf("\n");
    printf("Spreadsheet #%d\n", ++kase);

    scanf("%d", &q);
    while(q--) {
      scanf("%d%d", &r1, &c1);
      printf("Cell data in (%d,%d) ", r1, c1);
      if(ans[r1][c1] == 0) printf("GONE\n");
      else printf("moved to (%d,%d)\n", ans[r1][c1]/BIG, ans[r1][c1]%BIG);
    }
  }
  return 0;
}

11、习题4-6 莫尔斯电码   
给定一些莫尔斯编码，给定一些已知字典，给定一些编码，求解这些编码的对应原文。如果可以精确匹配，则直接输出原单词，如果有多个可精确匹配的结果，则输出匹配结果里字典序最小的单词并在末位加上“!”；如果无法精确匹配，则可以在编码的末尾增加或删除一些字符后匹配单词（增删应尽量小，就是找到增删最少的模糊匹配），无论增删后匹配一个还是多个，最后都要加上“？”；
如果有多个模糊匹配结果（增删数相等），则输出字典序最小的匹配结果；如果无精确匹配也无模糊匹配结果，则输出整个给定字典里字典序最小的那个单词。
#include <stdio.h>
#include <string.h>
#define INF 999
#define maxn 1000+10
int ccount;
int wcount;
int mcount;
int p[100+10];
struct morsecode{
    char name;
    char namecode[20];
}code[50];
struct contextword{
    char context[20];
    char contextcode[100];
}word[100+10];
struct morseword{
    char contextcode[100];
    char context[20];
}morse[maxn];
void readcode(){
    int i;
    char t[10];
    ccount=0;
    while(scanf("%s",t)&&t[0]!='*'){
        code[ccount].name=t[0];
        scanf("%s",code[ccount].namecode);
        ccount++;
    }
}
void printcode(){
    int i;
    for(i=0;i<ccount;i++){
        printf("%c %s\n",code[i].name,code[i].namecode);
    }
}
void readword(){
    char t[20];
    int i,j;
    int len;
    wcount=0;
    while(scanf("%s",t)&&t[0]!='*'){
        strcpy(word[wcount].context,t);
        len=strlen(t);
        for(i=0;i<len;i++){
            for(j=0;j<ccount;j++){
                if(t[i]==code[j].name){
                    strcat(word[wcount].contextcode,code[j].namecode);
                    break;
                }
            }
        }
        wcount++;
    }
} 
void printcontext(){
    int i;
    for(i=0;i<wcount;i++){
        printf("%s %s\n",word[i].context,word[i].contextcode);
    }
}
void readmorse(){
    int i,j,k;
    int min;
    char t[100];
    int fcount;
    int mlen,wlen;
    mcount=0;
    while(scanf("%s",t)&&t[0]!='*'){
        strcpy(morse[mcount].contextcode,t);
        fcount=0;
        for(i=0;i<wcount;i++){
            if(strcmp(word[i].contextcode,t)==0){
                fcount++;
                if(fcount==1)
                    strcpy(morse[mcount].context,word[i].context);
                else{
                    strcat(morse[mcount].context,"!"); 
                    break;
                }
            }
        }
        if(fcount==0){
            memset(p,0,sizeof(p));
            mlen=strlen(t);
            for(i=0;i<wcount;i++){
                k=0;
                wlen=strlen(word[i].contextcode);
                for(j=0;j<mlen;j++){
                    if(j<=wlen){
                        if(word[i].contextcode[j]==morse[mcount].contextcode[j])
                            k++;
                    }else
                        break;
                }
                if(k==mlen)
                    p[i]=wlen-mlen;
                else if(k<mlen&&k==wlen)
                    p[i]=mlen-wlen;
                else
                    p[i]=INF;        
            }
            
            min=p[0];
            j=0;
            for(i=0;i<wcount;i++){
                if(p[i]<min){
                    min=p[i];
                    j=i;
                }
            }
            strcpy(morse[mcount].context,word[j].context);
            strcat(morse[mcount].context,"?"); 
        }
        mcount++;
    }
} 
void printword(){
    int i=0;
    for(i=0;i<mcount;i++)
        printf("%s\n",morse[i].context);
}
int main(){
    readcode();
    readword();
    readmorse();
    printword();
    return 0;
}


12、过河卒
棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。
棋盘用坐标表示，A点(0, 0)、B点(n, m)(n, m为不超过20的整数)，同样马的位置坐标是需要给出的。
现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。
输入格式：
一行四个数据，分别表示B点坐标和马的坐标。
输出格式：
一个数据，表示所有的路径条数。
输入样例#1：
6 6 3 3
输出样例#1：
6
说明
结果可能很大！
题目分析
1，马走日，即“日”字对角线的一个点。不熟悉的百度下图示，好理解。
2，要求路线的数目，根据卒的走法，只有向右或向上（即向下，看怎样画图）两种走法，即一个点的上面或右面不是马或马的控点，即为一条路线，若两个方向都可走，路径加一，若两个方向都为马的控点，则路径减一。
解题思路
1，要求路线的数目，根据卒的走法，只有向右或向上（即向下，看怎样画图）两种走法，即一个点的上面或右面不是马或马的控点，即为一条路线，若两个方向都可走，路径加一，若两个方向都为马的控点，则路径减一。(思路对，但很难实现)
2，将思路1换个方式表达，另设一个与棋盘相同的数组，每点对应位置存放从（0，0）点到达该点的路径数目，
代码：
#include<bits/stdc++.h>
using namespacestd;
long longa[25][25],b[25][25];
void horse(intx,int y)
{
    a[x][y]=1;
    a[x-2][y-1]=1;
    a[x-2][y+1]=1;
    a[x-1][y-2]=1;
	    a[x-1][y+2]=1;
	    a[x+1][y-2]=1;
	    a[x+1][y+2]=1;
	    a[x+2][y-1]=1;
	    a[x+2][y+1]=1;
	}
            	 
	int main()
	{
	   int bx,by,mx,my;
	   cin>>bx>>by>>mx>>my;
	    horse(mx+1,my+1);//马走日，防止数组越界，下标为负数
	    b[1][1]=1;
	    for(int i=1;i<=bx+1;i++)
	        for(int j=1;j<=by+1;j++)
	        {
	           if((a[i][j]!=1)&&(b[i][j]==0))
	            {
	                b[i][j]=b[i-1][j]+b[i][j-1];//卒的两种走法
	            }
	        }
	    cout<<b[bx+1][by+1];
	    return 0;
	}
Ps:
1,存放路径的数组要用 long long 型，真的可能很大。
2，如果以数组表示马控卒走图，考虑马的控点的越界问题。
3，路径从（0,0）点开始时要设为1，不然路径永远是0。

解2
棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上的某一点有一个对方的马（如C点），该马所在的点和所有跳跃一步可达的点称为对方马的控制点，如图3-1中的C点和P1，……，P8，卒不能通过对方马的控制点。棋盘用坐标表示，A点(0,0)、B点(n, m) (n,m为不超过20的整数),同样马的位置坐标是需要给出的，C≠A且C≠B。现在要求你计算出卒从A点能够到达B点的路径的条数。

【输入】
给出n、m和C点的坐标。
【输出】
从A点能够到达B点的路径的条数。
【输入样例】
8 6 0 4
【输出样例】
1617
这个题是一道经典的老题一直都想写一下，终于在一个伸手不见五指的夜晚如愿以偿，用时2个小时，调试时间过长，主要原因是脑子反应过慢。这个题有个很麻烦的地方是故意把坐标给混乱，想了半天终于有一种好的办法，就是将原图向左翻转90度。如下图：


   #include<iostream>
   using namespace std;
   int n, m, cx, cy;
   long long f[40][40], g[40][40];
//注意尽量使用long long不然容易超出数据范围 
   int main()
   {
    cin>>n>>m>>cx>>cy;
    f[0][0]=1;
    //以下考虑马的控制点有无越界 
    g[cx][cy]=1;
    if(cx-1>=0&&cy-2>=0)g[cx-1][cy-2]=1;
    if(cx+1<=n&&cy-2>=0)g[cx+1][cy-2]=1;
    if(cx-2>=0&&cy-1>=0)g[cx-2][cy-1]=1;
    if(cx+2<=n&&cy-1>=0)g[cx+2][cy-1]=1;
    if(cx-2>=0&&cy+1<=m)g[cx-2][cy+1]=1;
    if(cx+2<=n&&cy+1<=m)g[cx+2][cy+1]=1;
    if(cx-1>=0&&cy+2<=m)g[cx-1][cy+2]=1;
    if(cx+1<=n&&cy+2<=m)g[cx+1][cy+2]=1;
   //以下为递推边界 
    for(int i=1; i<=n; i++)
        if(!g[i][0])f[i][0]=f[i-1][0];
    for(int j=1; j<=m; j++)
        if(!g[0][j])f[0][j]=f[0][j-1];
    //以下为递推关系式
    for(int i=1; i<=n; i++)
        for(int j=1; j<=m; j++)
        {
            if(g[i][j])f[i][j]=0;
            if(!g[i][j])f[i][j]=f[i][j-1]+f[i-1][j];
        }
    cout<<f[n][m];
    return 0;
    }
      解3
   #include<cstdio>
  using namespace std;
   int cnt=0;//用于存储路径数 
   bool visd[30][30]={0};//用于标记坐标位置是否已经被搜索 0为没有，1为访问
   bool b[30][30]={0};//用于标记坐标点是否为马的控制点，0为不是，1为是 
  int n, m, cx, cy;
  int next[2][2]={{1,0},{0,1}};
   void dfs(int x, int y)
  {
    if(x==n && y==m)
    {
        cnt++;
        return;
    }
    for(int i=0; i<2; i++)
    {
        int nx=x+next[i][0];
        int ny=y+next[i][1];
        if((nx>n) || (ny>m) || b[nx][ny])continue;
    //判断下一步坐标是否越界 或是马的控制点 
        if(!visd[nx][ny] )
        {
            visd[nx][ny]=1;
            dfs(nx,ny);
            visd[nx][ny]=0;
        }
        
    }
   }
      int main()
  {
    scanf("%d%d%d%d",&n,&m,&cx,&cy);
    b[cx][cy]=1;
    if(cx-1>=0&&cy-2>=0)b[cx-1][cy-2]=1;
    if(cx+1<=n&&cy-2>=0)b[cx+1][cy-2]=1;
    if(cx-2>=0&&cy-1>=0)b[cx-2][cy-1]=1;
    if(cx+2<=n&&cy-1>=0)b[cx+2][cy-1]=1;
    if(cx-2>=0&&cy+1<=m)b[cx-2][cy+1]=1;
    if(cx+2<=n&&cy+1<=m)b[cx+2][cy+1]=1;
    if(cx-1>=0&&cy+2<=m)b[cx-1][cy+2]=1;
    if(cx+1<=n&&cy+2<=m)b[cx+1][cy+2]=1;
    dfs(0,0);
    printf("%d",cnt);
    return 0;
}
13、习题4-1 象棋
   考虑一个象棋残棋
考虑一个象棋残局，其中红方有n（2≤n≤7）个旗子，黑方只有一个将。红方除了有一个帅（G）之外还有3种可能的棋子：车（R），马（H），炮（C），并且需要考虑“蹩马腿”与将和帅不能照面（将、帅如果同在一条直线上，中间又不隔着任何棋子的情况下，先走的一方获胜）的规则。
输入所有棋子的位置，保证局面合法并且红方已经将军。你的任务是判断红方是否已经把黑方将死。
 include <iostream>
include <cctype>
include <memory.h>
sing namespace std;
har chess[11][10];//棋盘
const int movH[8][2] = {{-1,2},{1,2},{2,1},{2,-1},{1,-2},{-1,-2},
{-2,-1},{-2,1}};
//棋子
struct Chess
{
    char type;
    int x;
    int y;
};
//由馬的走位推出“馬脚”的位置
int isMove (int i)
{
    if(i > 0)
        return -1;
    else if (i < 0)
        return 1;
    else
        return 0;
}
//帥的攻击路线
bool G (int x, int y, int target_x, int target_y)
{
    int i;
    if (y != target_y)//如果帥与目标不在同一纵轴上，则必定无法攻击成功
        return false;
     //将的攻击路线上是否有别的棋子
    for (i = x-1; i > target_x; i--)
        if (isalpha(chess[i][y]))
            return false;
    return true;
}
//車的攻击路线
bool R (int x, int y, int target_x, int target_y)
{
    int i;
    if (x != target_x && y != target_y)
        return false;
    else
    {
       //按照車在敌方将的上下左右四个位置有不同的攻击路线（炮也一样）
        if (x == target_x)
        {
            if (y < target_y)//車在将的左边
                for (i = y+1; i <= target_y; i++)
                {
                    if (isalpha(chess[x][i]))
                        return false;
                    else
                        continue;
                }
            else if (y > target_y)//車在将的右边
                for (i = y-1; i >= target_y; i--)
                {
                    if (isalpha(chess[x][i]))
                        return false;
                    else
                        continue;
                }
        }
        else if (y == target_y)
        {
            if (x < target_x)//車在将的上方
                for (i = x+1; i <= target_x; i++)
                {
                    if (isalpha(chess[i][y]))
                        return false;
                    else
                        continue;
                }
            else if (x > target_x)//車在将的下方
                for (i = x-1; i >= target_x; i--)
                {
                    if (isalpha(chess[i][y]))
                        return false;
                    else
                        continue;
                }
        }
    }
    return true;
}
		//馬的攻击路线
	bool H (int x, int y, int target_x, int target_y)
	{
	    int i;
	    for (i = 0; i < 8; i++)
	        if (x+movH[i][0] == target_x && y+movH[i][1] == target_y)
	            if (!isalpha(chess[i+isMove(movH[i][0])][i+isMove(movH[i][1])]))//“馬脚”处是否有棋子
	                return true;
	    return false;
	}
	//炮的攻击路线
	bool C (int x, int y, int target_x, int target_y)
	{
	    int i,cnt = 0;
	    if (x != target_x && y != target_y)
	        return false;
	    else
	    {
	        if (x == target_x)
	        {
	            if (y < target_y)
	                for (i = y+1; i <= target_y; i++)
	                {
	                    if (isalpha(chess[x][i]))
	                        cnt++;
	                    else
	                        continue;
	                }
	            else if (y > target_y)
	                for (i = y-1; i >= target_y; i--)
	                {
	                    if (isalpha(chess[x][i]))
	                        cnt++;
	                    else
	                        continue;
	                }
	        }
	        else if (y == target_y)
	        {
	            if (x < target_x)
	                for (i = x+1; i <= target_x; i++)
	                {
	                    if (isalpha(chess[i][y]))
	                        cnt++;
	                    else
	                        continue;
	                }
	            else if (x > target_x)
	                for (i = x-1; i >= target_x; i--)
	                {
	                    if (isalpha(chess[i][y]))
	                        cnt++;
	                    else
	                        continue;
	                }
	        }
	    }
	    if (cnt == 1)//炮与攻击目标之间有且只有一个棋子才能攻击成功
	        return true;
	    else
	        return false;
	}
	//红方所有棋子分别对目标位置进行攻击
	bool isKill (Chess* p, int n, int target_x, int target_y)
	{
	    int cnt = 0;
	    for (int i = 0; i < n; i++)
	    {
	        if (p[i].type == 'G')
	        {
	            if (G(p[i].x, p[i].y, target_x, target_y))
	                cnt++;
	        }
	        else if (p[i].type == 'R')
	        {
	            if (R(p[i].x, p[i].y, target_x, target_y))
	                cnt++;
	        }
	        else if (p[i].type == 'C')
	        {
	            if (C(p[i].x, p[i].y, target_x, target_y))
	                cnt++;
	        }
	        else if (p[i].type == 'H')
	        {
	            if (H(p[i].x, p[i].y, target_x, target_y))
	                cnt++;
	        }
	        else
	            continue;
	    }
	    if (cnt && !isalpha(chess[target_x][target_y]))
	        return true;
	    else if (isalpha(chess[target_x][target_y]) && cnt > 1)
//若黑方将的下一步会吃掉红方一棋子（不包括将与帥之间的攻击），那么红方必须有其他棋子能成功进行下一步攻击
	        return true;
	    else
	        return false;
	}
	int main (void)
	{
	    char c;
	    int n,t_x,t_y;
	    while ((cin >> n >> t_x >> t_y) && n && t_x && t_y)
	    {
	        memset(chess, '*', sizeof(chess));
	        Chess* p = new Chess[7];
	        chess[t_x][t_y] = 'g';
	        int i,x,y;
	        for (i = 0; i < n; i++)
	        {
	            cin >> c >> x >> y;
	            chess[x][y] = c;
	            p[i].type = c;
	            p[i].x = x;
	            p[i].y = y;
	        }
	        bool way1 = true, way2 = true, way3 = true, way4 = true;
//先对帥的位置进行判断，如果将与帥处于可以互相攻击的位置，那么红方必输
	        for (i = 0; i < n; i++)
	            if (p[i].type == 'G')
	                if (G(p[i].x, p[i].y, t_x, t_y))
	                {
	                    cout << "NO\n";
	                    return 0;
	                }
	  //对黑方"将"所有可行的下一步棋进行模拟攻击
	        if (t_x-1 >= 1)
	        {
	            way1 = false;
	            if (isKill(p, n, t_x, t_y-1))
	                way1 = true;
	        }
	        if (t_x+1 <= 3)
	        {
	            way2 = false;
	            if (isKill(p, n, t_x, t_y+1))
	                way2 = true;
	        }
	        if (t_y-1 >= 4)
	        {
	            way3 = false;
	            if (isKill(p, n, t_x-1, t_y))
	                way3 = true;
	        }
	        if (t_y+1 <= 6)
	        {
	            way4 = false;
	            if (isKill(p, n, t_x+1, t_y))
	                way4 = true;
	        }
	        if (way1 && way2 && way3 && way4)
	            cout << "YES\n";
	        else
	            cout << "NO\n";
	        delete []p;
	    }
	    return 0;
	}

14、习题4-3黑白棋   
你的任务是模拟黑白棋游戏的进程。黑白棋的规则为：黑白双方轮流放棋子，每次必须让新放的棋子“夹住”至少一枚对方棋子，然后把所有被新放棋子“夹住”的对方棋子替换成己方棋子。一段连续（横、竖或者斜向）的同色棋子被“夹住”的条件是两端都是对方棋子（不能是空位）。如图4-6（a）所示，白棋有6个合法操作，分别为(2,3),(3,3),(3,5),  (6,2),(7,3),(7,4)。选择在(7,3)放白棋后变成如图4-6（b）所示效果（注意有竖向和斜向的共两枚黑棋变白）。注意(4,6)的黑色棋子虽然被夹住，但不是被新放的棋子夹住，因此不变白。
输入一个8*8的棋盘以及当前下一次操作的游戏者，处理3种指令：L指令打印所有合法操作，按照从上到下，从左到右的顺序排列（没有合法操作时输出
No legal move）。Mrc指令放一枚棋子在(r,c)。如果当前游戏者没有合法操作，则是先切换游戏者再操作。输入保证这个操作是合法的。输出操作完毕后黑白方的棋子总数。Q指令退出游戏，并打印当前棋盘（格式同输入）。
其实下子的时候也是用到了L操作 需要判断 当前的颜色的棋子是否有地方放 所以用 is_print 控制是否输出结果 ， 用Flag判断是否有地方可以放子。
void L(bool is_print)
{
    L_Refresh = 1, Flag = 0;
    for (int i = 0; i < 8; ++i)
        for (int j = 0; j < 8; ++j)
        {
            if (Board[i][j] != '-') continue;
            for (int l = 0; l < 8; ++l)
                if (judge(i, j, Rx[l], Ry[l], is_print))  break;
	        }
	    if (is_print) Flag ? printf("\n") : printf("No legal move.\n");
	}
下面就比较简单了 直接用L（）函数判断能否下子如果能的话分别判断八个方向是否能翻转棋子 如果能的话就翻转。
void M()
{
    char i = Command[1] - 49, j = Command[2] - 49;
    if (!L_Refresh) L(0);
//判断是否可以下子 如果之前查询过是可以下子的话则跳过
if (!Flag) Current = oppo();
//没有地方可以下棋
    for (int l = 0; l < 8; ++l)
        if (judge(i, j, Rx[l], Ry[l], 0)) change(i, j, Rx[l], Ry[l]);
    Current == 'W' ? Num[0] += 1 : Num[1] += 1;
    Board[i][j] = Current;
	    Current = oppo();
	    L_Refresh = 0;
	    printf("Black - %2d White - %2d\n", Num[1], Num[0]);
	}


AC代码如下： 
#include<iostream>
#include <cstdio>
char Board[11][11], Current, Command[5];
bool Flag, L_Refresh;
//flag用于空格的输出,同时可以判断出本局是不是当前颜色的棋子无路可走
int Times, Num[2];
int Rx[] = { 0, 0, 1, -1, 1, -1, 1, -1 };
int Ry[] = { 1, -1, 0, 0, 1, -1, -1, 1 };
inline char oppo()
{
	    return (Current == 'W' ? 'B' : 'W');
	}
	 
	bool judge(int i, int j, int x, int y, bool is_print)
	{
	    int ii = i, jj = j + 1, flg = 0;
	    while ((i += x) < 8 && (j += y) < 8 && i >= 0 && j >= 0)
	    {
	        if (Board[i][j] == '-') break;
	        if (Board[i][j] == Current)
	        {
	            if (!flg) break;
	            if (is_print)
	            {
	                if (Flag) printf(" ");
	                printf("(%d,%d)", ii, jj);
	            }
	            if (!Flag) Flag = true;
	            return true;
	        }
	        ++flg;
	    }
	    return false;
	}
	 
	void change(int i, int j, int x, int y)
	{
	    int n = 0;
	    while (Board[i += x][j += y] != Current)
	    {
	        Board[i][j] = Current, ++n;
	    }
	    Current == 'W' ? (Num[0] += n, Num[1] -= n) : (Num[0] -= n, Num[1] += n);
	}
	 
	void L(bool is_print)
	{
	    L_Refresh = 1, Flag = 0;
	    for (int i = 0; i < 8; ++i)
	        for (int j = 0; j < 8; ++j)
	        {
	            if (Board[i][j] != '-') continue;
	            for (int l = 0; l < 8; ++l)
	                if (judge(i, j, Rx[l], Ry[l], is_print))  break;
	        }
	    if (is_print) Flag ? printf("\n") : printf("No legal move.\n");
	}
	void M()
	{
	    char i = Command[1] - 49, j = Command[2] - 49;
	    if (!L_Refresh) L(0);
//判断是否可以下子 如果之前查询过是可以下子的话则跳过
	    if (!Flag) Current = oppo();
//没有地方可以下棋
 	    for (int l = 0; l < 8; ++l)
	        if (judge(i, j, Rx[l], Ry[l], 0)) change(i, j, Rx[l], Ry[l]);
	    Current == 'W' ? Num[0] += 1 : Num[1] += 1;
	    Board[i][j] = Current;
	    Current = oppo();
	    L_Refresh = 0;
	    printf("Black - %2d White - %2d\n", Num[1], Num[0]);
	}
	 
	void Q()
	{
	    for (int i = 0; i < 8; ++i) printf("%s\n", Board[i]);
	}
	 
	int main()
	{
	    scanf("%d", & Times);
	    while (Times--)
	    {
	        for (int i = 0; i < 8; ++i) scanf("%s", Board[i]);
	        scanf("\n%c", & Current);
	        L_Refresh = 0;
	        Num[0] = Num[1] = 0;
	        for (int i = 0; i < 8; ++i)
	            for (int j = 0; j < 8; ++j)
	            {
	                if (Board[i][j] == 'W') ++Num[0];
	                else if (Board[i][j] == 'B') ++Num[1];
	            }
	        while (scanf("%s", Command) && Command[0] != 'Q')
	            Command[0] == 'L' ? L(1) : M();
	        Q();
	        if (Times) printf("\n");
	    }
	    return 0;
     }

15、习题4-7 RAID技术 
RAID技术用多个磁盘保存数据。每份数据在不止一个磁盘上保存，因此在某个磁盘损 
坏时能通过其他磁盘恢复数据。本题讨论其中一种RAID技术。数据被划分成大小 
为s（1≤s≤64）比特的数据块保存在d（2≤d≤6）个磁盘上，如图所示，每d-1个数据块都 
有一个校验块，使得每d个数据块的异或结果为全0（偶校验）或者全1（奇校验）。

（三）案例解析
例如，d=5，s=2，偶校验，数据6C7A79EDFC（二进制01101100 01111010 01111001 11101101 11111100）的保存方式如图所示

其中加粗块是校验块。输入d、s、b、校验的种类（E表示偶校验，O表示奇校验）以及b（1≤b≤100）个数据块（其中“x”表示损坏的数据），
你的任务是恢复并输出完整的数据。如果校验错或者由于损坏数据过多无法恢复，应报告磁盘非法。 
（四）样例输入
注意：
其中样例输入中：第一组数据网站和书籍有所出入。自己检查后发现书上是可以的。所以将原来的
0001011111 
0110111011 
1011011111 
1110101100 
0010010111 
替换为：
0001101100
0110111010
0111011001
1110111101
1111110011
样例输入：
5 2 5　　//第一个参数是磁盘块（将一个数据块拆分为多个分别存放在各个磁盘块中）--列数  第二个参数是每个磁盘块存放的数据位数  第三个参数是数据块数（将每一块数据拆分为多个分别存放在各个磁盘中）--行数
E 　　　　//E是偶校验 O是奇校验
0001101100
0110111010
0111011001
1110111101
1111110011
3 2 5
E
0001111111
0111111011
xx11011111
3 5 1
O
11111
11xxx
x1111
0　　//0代表输入结束
注意点：
1、校验块是不加入十六进制运算的 
2、校验块的顺序是第一行的第一块，第二行的第二个，到了某行最后一个时，下一行就有从第一个开始算做校验块  -----  当前行数%列数
3、十六进制转换是 一个十六进制数字需要四个二进制数字，所以每四位二进制就是一位十六进制 
4、校验进行是一行中每个块的相同位进行校验 
5、奇校验就是每个数互相异或下来是1，偶校验就是0 
6、磁盘不合理有三种可能性：一是已知的位校验不符合，二是未知位有多位，无法判断其内容，三是校验位中含有x
数据实际存放样式：
5 2 5
E
0001101100            00 01 10 11 00
0110111010            01 10 11 10 10
0111011001    ----->  01 11 01 10 01
1110111101            11 10 11 11 01
1111110011            11 11 11 00 11
3 2 5
E                    00 01 11
0001111111           11 11 01
0111111011 ---->     11 11 10
xx11011111           11 xx 11
                     01 11 11
3 5 1
O
11111    
11xxx        ----->    11111 11xxx x1111
x1111
（五）样例输出
Disk set 1 is valid, contents are: 6C7A79EDFC 
Disk set 2 is invalid. 
Disk set 3 is valid, contents are: FFC
（一）基础知识补充（RAID和奇偶校验）
磁盘管理—磁盘阵列(RAID)实例详解（本题目常用RAID 5技术实现）
奇偶校验（同行数据中同位上的1的个数，偶校验时：1的个数为偶数则校验结果为0，否则为1，奇校验时相反：1的个数为偶数则校验结果为1，否则为0）

二：代码实现
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string>

#define ROW 100    //最多100条    100行
#define COL 6    //最多6个磁盘 6列
#define BITS 64    //每个磁盘块最多64位

int col, row, bits;
char DISK[ROW][COL][BITS], ct;    //获取基本数据：磁盘数据和校验类型
char Ddata[COL][BITS], CkCode[BITS];    //获取每行数据和校验值

//-1无效 0结束 1正确


获取磁盘数据，并进行检测和纠错
int getDiskData()    //改进：在这里检错
{
    int flag = 1;
    int x_bits[BITS], xNum = 0, OneNum[BITS];    //记录x位置x_bits中内容是对于列数值和x的个数
    scanf("%d", &col);
    if (col == 0) return 0;
    scanf("%d %d", &bits, &row);
    getchar();
    scanf("%c", &ct);
    getchar();

    //获取磁盘数据
    for (int i = 0; i < row;i++)
    {
        memset(x_bits, -1, sizeof(x_bits));
        memset(OneNum, 0, sizeof(OneNum));
        for (int j = 0; j < col; j++)
        {
            for (int k = 0; k < bits; k++)
            {
                scanf("%c", &DISK[i][j][k]);
                if (DISK[i][j][k] == '\n')
                {
                    k--;
                    continue;
                }
                if (i%col == j)    //不允许校验位为x
                {
                    if (DISK[i][j][k] == 'x')
                        flag = -1;
                }

                if (DISK[i][j][k] == 'x')
                {
                    if (x_bits[k] != -1)    //不允许在同一位出现多个x
                        flag = -1;
                    x_bits[k] = j;    //最多记录不同位上的x位置
                }
                if (i%col !=j && DISK[i][j][k] == '1')
                    OneNum[k]++;
            }
        }
        //复制校验位
        memcpy(CkCode, DISK[i][i%col], BITS);
        for (int k = 0; k < bits;k++)    //将对应位置上的数据进行纠错
        {
            if (x_bits[k] != -1)    //该行有x数据,需要纠错（纠错就避免了检错）
            {
                if (ct == 'E')    //偶校验
                {
                    if ((CkCode[k] == '0'&&OneNum[k] % 2 == 1) || (CkCode[k] == '1' && OneNum[k] % 2 == 0))
                        DISK[i][x_bits[k]][k] = '1';
                    else
                        DISK[i][x_bits[k]][k] = '0';
                }
                else    //奇校验
                {
                    if ((CkCode[k] == '1'&&OneNum[k] % 2 == 1) || (CkCode[k] == '0' && OneNum[k] % 2 == 0))
                        DISK[i][x_bits[k]][k] = '1';
                    else
                        DISK[i][x_bits[k]][k] = '0';
                }
            }
            else    //该行没有x数据，直接检错
            {
                if (ct == 'E' && ((CkCode[k] == '1'&&OneNum[k] % 2 == 0) || (CkCode[k] == '0' && OneNum[k] % 2 == 1)))
                    flag = -1;
                if (ct == 'O' && ((CkCode[k] == '1'&&OneNum[k] % 2 == 1) || (CkCode[k] == '0' && OneNum[k] % 2 == 0)))
                    flag = -1;
            }
        }
    }
    getchar();
    return flag;
}

16、数据挖掘
有两个i个元素的数组P和Q，P数据每个数据占Sp个字节，Q数据每个占Sq个字节，然后我们可以根据第i个元素在P中的位置（一个字节算一个位置），推出第i个元素在Q中的位置。这个公式可以表示为Pi数据的位置/Sp=Qi数据的位置/Sq=i
比如说pi数据在第100个字节，一个p是占5个字节，那pi/p=20，也就是说是第20个元素，假设Q一个元素是占7个字节，那Q第20个元素的位置为20*7=140个字节。
要求：已知元素的个数n和Sq和Sp求储存Q数组所需要的最大的字节K，本来很简单的
K=Sp*n/Sq 
就好了，但是。题目说除法太慢了，要我们用另一个公式
K=（Sp*n+Sp*n<<A）>>B
注意这个公式与上一个公式不等价，就是两个算出来是不一样的。题目说Q数组储存的空间可以不连续，但不能叠加，也就是说Q储存的最小字节为Sq*n，如果算出来的K大于这个数就是合法的。
然后要我们输出K，A，B的值，A要最小，如果A一样小的情况，输出B最小，那直接写一个循环，A1~32，B1~32暴力枚举就好了，至于为什么是循环到32，个人认为，因为Sq*n（Sq<2^10,n<2^20）最大值是2^30次，而答案肯定大于这个值，但是如果A大于32的话。2^32*2^32次就会超过long long的长度，所以再大没有什么意义了。

#include <iostream>
#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <math.h>
using namespace std;
 int main()
{
    long long n;
    long long s=0;
    long long i;
    long long j;
    long long a,b;
    long long li=0,lj=0;
    while(scanf("%lld %lld %lld",&n,&a,&b)!=EOF)
    {
        long long m=1;
        m=m<<62;
        int f=0;
        for(i=0;i<=32;i++)
        {
            for(j=0;j<=32;j++)
            {
                s=((n-1)*a+((n-1)*a<<i)>>j)+b;
                if(s>=n*b)
                {
                    if(s<m)
                    {
                        m=s;
                        li=i;
                        lj=j;
                    }
                }
            }
        }
        printf("%lld %lld %lld\n",m,li,lj);
    }
    return 0;
}
 
解2
输入：20 3 5
输出：119 0 0
Qofs(i)=Pofs(i)+Pofs(i)=2Pofs(i)
P数据（起点）：0(0)1(3)2(6)3(9)4(12)...N-1(3N-1)
Q数据（起点） :  0(0)1(6)2(12)3(18)4(24)...N-1(6N-6)
K=6*19+5=119
输入：1024 7 1
输出：1119 2 5
Qofs(i)=(Pofs(i)+Pofs(i)*4)/32=5Pofs(i)/32
P数据（起点）：0(0)1(7)2(14)3(21)4(28)...N-1(7(N-1))
Q数据（起点） :  0(0)1(1)2(2)3(3)4(4)...N-1(7*(N-1)*5/32)
K=7*1023*5/32+1=1119
6、对样例1的处理过程进行如下：
Qofs(0)=(Profs(0)+Profs(0)*2^A)/2^B
5<=(3+3*2^A)/2^B
A=0
3+3*2^0=6>5,(3+3*2^0)/2^0=6>5(最小);(3+3*2^0)/2^1=3<5;A=0,B=0。
A=1
3+3*2^1=9>5,(3+3*2^1)/2^0=9>5;(3+3*2^1)/2^1=4.5<5(大);因9>6，故取上方的A=0,B=0。
7、对样例2的处理过程进行如下：
Qofs(0)=(Profs(0)+Profs(0)*2^A)/2^B
1<=(7+7*2^A)/2^B
A=0
7+7*2^0=14>1,(7+7*2^0)/2^0=14>1;(7+7*2^0)/2^1=7>1;(7+7*2^0)/2^2=3>1;(7+7*2^0)/2^3=7/4>1.
A=1
7+7*2^1=21>1,(7+7*2^1)/2^0=21>1;(7+7*2^1)/2^1=10>1;(7+7*2^1)/2^2=5>1;(7+7*2^1)/2^2=5>1(7+7*2^1)/2^3=2>1;
(7+7*2^1)/2^4=21/16>1(大).
A=2
7+7*2^2=35>1,(7+7*2^2)/2^0=35>1;(7+7*2^2)/2^1=17>1;(7+7*2^2)/2^2=8>1;(7+7*2^2)/2^3=4>1;
(7+7*2^2)/2^4=2>1;(7+7*2^2)/2^5=35/32(最小).(7+7*2^1)/2^2=5>1;(7+7*2^1)/2^2=5>1(7+7*2^0)/2^3=7/4>1.
A=3
7+7*2^3=63>1,(7+7*2^3)/2^0=63>1;(7+7*2^3)/2^1=31>1;(7+7*2^3)/2^2=15>1;(7+7*2^3)/2^3=7>1;
(7+7*2^3)/2^4=3>1;(7+7*2^3)/2^5=63/32(大).
故A=2 B=5
8、可以开始编码。样例通过后，提交WA。
9、参考http://blog.csdn.net/code4101/article/details/38540759#t17说A、B值都在0~31以内；本人猜测在20以内，当然错误，还有就是int不够用了，要用long long。
10、修改，提交WA，下载测试数据http://neerc.ifmo.ru/past/2003.html。
11、从http://blog.csdn.net/code4101/article/details/38540759#t17拷贝代码，提交AC，开始进行对拍。
12、为了方便读者对拍，提供部分测试数据如下：
1000889 105 966
1004073 115 711
1007966 824 176
1017709 6 912
1021168 187 573
1025618 66 869
1029623 132 928
1029727 60 546
1030074 48 318
103136 47 981
1037479 796 9
1041006 236 912
1041765 222 840
1042437 318 961
1044935 50 383
1045889 65 650
105383 950 236
110116 231 731
121336 13 149
131177 298 995
137619 923 67
142186 109 654
149809 152 588
15292 124 427
155603 123 879
157707 82 784
158650 22 411
16430 178 921
169176 224 810
173220 69 548
175888 161 1009
17797 76 753
179490 19 181
183323 1015 10
185664 282 1007
187225 38 402
201189 82 307
202234 167 651
202390 55 373
202824 102 523
204473 72 759
206310 200 744
208229 253 826
20921 14 711
211564 93 925
211611 18 208
211852 52 763
212750 749 468
224009 36 440
23087 437 517
233361 100 773
235922 12 444
238466 186 700
241224 8 746
241551 1 76
24466 82 251
256942 14 961
259655 227 760
265687 121 900
269598 86 293
270037 656 550
275011 248 987
278137 127 15
278615 25 679
288710 300 933
300240 257 841
303949 229 890
305604 216 776
310082 256 915
31016 856 217
311663 132 721
313084 298 1006
313463 5 578
322344 996 84
322828 111 702
323116 34 915
324872 874 45
326773 959 29
333144 96 719
335462 69 930
336423 709 360
343208 566 327
345679 95 521
346081 94 576
35062 1 187
351697 127 723
353618 112 371
353948 28 728
35439 152 866
357498 78 927
358970 956 15
369735 239 903
372529 70 508
374421 324 979
379699 243 834
379875 55 634
382941 518 66
383630 6 239
384010 172 321
385215 725 28
387032 170 743
389181 43 926
389548 161 614
391255 286 959
396300 160 854
397136 28 983
398760 19 826
399729 26 913
402320 131 88
40308 92 323
407521 278 850
408324 31 114
409557 89 980
409574 680 698
410372 145 822
417100 956 18
42006 149 838
425132 4 529
426019 115 582
435093 406 870
438571 152 956
442430 277 955
449266 277 918
451331 34 316
451816 165 985
452467 223 768
452601 84 873
453834 18 634
454703 120 774
456879 158 504
459197 84 781
464965 171 227
467087 126 1001
470980 115 845
473061 233 730
476503 22 285
481628 13 214
485685 81 510
486215 45 371
491075 96 559
491782 28 723
492545 220 851
505645 272 966
507700 86 781
50968 902 99
511184 236 901
513458 80 800
518832 115 834
520300 169 872
526371 68 922
527 136 780
531524 175 579
53338 28 116
53717 2 1021
542945 98 502
545588 35 366
545938 2 287
547004 664 5
549030 126 634
551 274 840
556483 20 511
559372 139 905
563118 287 1006
570645 32 645
572662 122 872
579522 170 997
580147 29 178
581192 172 650
582803 217 831
58727 888 890
587344 80 414
589671 72 911
592667 133 493
605884 23 471
606523 81 803
615934 934 1005
617241 49 712
618989 229 830
620654 111 1018
622608 98 978
627494 74 857
627620 9 280
627942 829 52
628508 437 449
63250 251 765
634913 8 110
641440 24 490
641871 259 982
642048 8 742
651463 13 983
653604 21 596
65781 204 726
658261 73 782
662455 234 716
663498 58 382
666484 155 586
667166 63 201
670940 171 550
671167 315 991
67459 53 969
674712 896 234
681305 85 676
681433 359 12
683447 77 1001
684530 135 945
686989 57 679
692020 142 555
692654 130 425
701551 118 785
70494 47 3
709496 56 379
711261 2 459
713115 154 464
717059 926 277
722130 141 893
722623 186 761
729867 3 764
731098 14 520
731613 246 976
737662 145 728
740417 50 721
745238 56 1016
748243 139 534
75383 877 115
756956 70 799
765045 170 606
774894 753 28
775217 202 1019
776167 42 539
779356 32 793
780659 14 981
784355 56 767
785159 364 184
786423 318 999
788198 45 789
793789 63 971
794772 36 630
795770 90 343
795829 75 476
795888 957 6
796757 2 488
797908 5 945
798241 212 743
803472 5 100
806109 19 887
808399 15 218
80942 11 1016
811263 70 510
812617 263 907
81544 41 301
816074 23 652
816490 332 1014
816967 100 399
820379 97 28
830415 152 1006
832678 138 824
834417 891 973
83912 158 507
841078 50 519
842083 32 951
844766 287 873
850970 207 752
851386 5 816
852157 110 795
857141 6 949
860156 374 263
861037 87 829
863094 73 660
865918 50 915
86932 20 985
873883 166 939
874443 127 454
876801 362 800
876927 471 444
878063 39 886
878407 73 771
878757 111 294
878913 111 569
879400 95 988
881164 174 560
884133 594 159
88454 270 1015
884701 36 978
887178 185 590
888290 134 998
900709 235 937
90121 196 780
903154 268 819
904357 153 972
905573 173 947
906950 82 260
908613 277 871
909207 150 800
909490 19 324
91268 240 789
914982 16 303
91894 283 983
924795 96 968
925350 25 559
926466 73 581
930090 152 911
934654 38 407
936195 35 756
936914 76 885
939073 49 780
943982 116 619
944223 155 824
957466 35 779
964734 10 115
966485 68 978
973691 271 881
974766 697 756
976637 173 1012
977008 117 689
977652 48 571
982846 254 823
992567 24 1016
994239 50 713
99677 274 794
998209 91 622
13、以其中一组数据为例，进行跟踪排错，
998209 91 622
AC代码输出：   726696046 30 27
代码输出： 726696046 31 28
14、将AC代码，英文文章对照着读，在A有多解的情况下，选小的。
15、明白了此题选择的第一关键是K，第二关键是A，第三关键是B；其它都不是关键。
16、FC: 找不到差异，提交代码WA。
17、将AC代码拷入本人程序，采用拼接替换的办法进行测试，发现k值正确，继续测试，发现A值正确，继续测试，发现B值错误。
             if(result>=sq){ //此句AC 
#include <stdio.h>
#include <math.h>
//暴力法，穷举 猜测A<30 B<30 因为N<=2^20 Sp<=2^10 Sq<=2^10 整数范围2^31 此句猜想错误，为警示，未删
#define maxn 32
struct mining{
    long long a;
    long long b;
    long long k;
    double s;
}out[maxn*maxn],minout;
int main(){
    long long n,sp,sq;
    long long i,j;
    long long number,result;//int 改成 long long 
    long long count;
    long long k;
    while(scanf("%lld%lld%lld",&n,&sp,&sq)!=EOF){
        //方法一 
        count=0;
        for(i=0;i<maxn*maxn;i++){
            out[i].a=n*sq<<10;
            out[i].b=n*sq<<10;
            out[i].k=n*sq<<10;
            out[i].s=n*sq<<10;
        }
        for(i=0;i<maxn;i++){
            number=sp+(sp<<i);
            if(number>=sq){
                for(j=0;j<maxn;j++){
                    result=number>>j;
                   // if((result>=sq)&&((result/2)<sq)){ //此句WA ，即存在是sq两倍，三倍的最小值，目前还想不明白，待日后解决2016-11-13 16:45 
                    if(result>=sq){ //此句AC 
                        out[count].a=i;
                        out[count].b=j;
                        out[count].k=((n-1)*(sp+(sp<<i))>>j)+sq;//AC的原因应该以该值最小进行选择 
                        out[count].s=number*1.0/pow(2,j);//WA的原因是一直以该值最小进行选择 ,为警示，未删除该句 
                        count++;
//                        break;//此处应删除 
                    }
                }
            }
        }
        minout=out[0];
        for(i=0;i<count;i++){
            if(out[i].k<minout.k)
                minout=out[i];
        }
        printf("%lld %lld %lld\n",minout.k,minout.a,minout.b);
        //方法二 
/*        minout.k=n*sq<<10;
        for(i=0;i<maxn;i++){
            for(j=0;j<maxn;j++){
                number=(sp+(sp<<i))>>j;
                if(number>=sq){
                    k=((n-1)*sp+((n-1)*sp<<i)>>j)+sq;
                    if(k<minout.k){
                        minout.a=i;
                        minout.b=j;
                        minout.k=k;
                    }
                }
            }
        }
        printf("%lld %lld %lld\n",minout.k,minout.a,minout.b);*/
    }
    return 0;
}


解3
代码：（Accepted，0 ms）
	#include<iostream>
	unsigned N, A, B, Sp, Sq, ansA, ansB;
	unsigned long long Pofs, K, nowK;
	int main()
	{
	    //freopen("in.txt", "r", stdin);
	    while (scanf("%u%u%u", &N, &Sp, &Sq) != -1) {
	        K = 0xffffffffffffffff;
	        for (A = 0;A < 32;++A) for (B = 0;B < 32;++B) {
	            Pofs = (N - 1)*Sp;
	            nowK = (Pofs + (Pofs << A) >> B) + Sq;
	            if (nowK >= N*Sq && nowK < K) K = nowK, ansA = A, ansB = B;
	        }
	        printf("%llu %u %u\n", K, ansA, ansB);
	    }
	    return 0;
}
解4
所谓偏移量Pofs(i)其实就是当P数组为连续存储时第i个元素距离P数组起始存储位置的距离。
根据原题有如下公式
Pofs(0)=0
Pofs(1)=Pofs(0)+Sp
Pofs(i)=Sp*i
同理
Pofq(i)=Sq*i
又因为
i=Pofs(i)/Sp
所以
Pofq(i)=Sq*Pofs(i)/Sp
但是乘法和除法cpu计算起来太慢了所以题目要求用下面这个公式代替上面那个公式来通过Pofs(i)计算Qofs‘(i)
Qofs'(i) = (Pofs(i) + Pofs(i) < < A) > > B
题目的要求就是找到最优的A和B使得利用Qofs‘(i)存储Q数组所需的空间K尽量小。多解时取最小A，仍多解取最小B。
因为N*Sq<=2^30所以A/B的取值范围大致确定为[0,32)(其实我是看了测试数据才确认的数据范围...）所以本题比较适合暴力穷举。
同时A/B的取值应使得K>=n*Sq 既 ( (（n-1)*Sp+ （n-1)*Sp < < A) > > B)+Sq>=n*Sq
题目中A/B有取尽量小的要求，不需要刻意选择，只要由小到大穷举并取先即可。

#include<stdio.h>
#include<string.h>
 long long n, sp, sq;
int A,B;
 int main(){
    while(scanf("%d%d%d",&n,&sp,&sq)==3)    {
        bool firstk = true;
        long long k;
        int kn = 0;
        for(int i = 0; i<=31;i++)        {
            for(int j = 0; j<= 31; j++)            {
                long long tempk = (((n-1)*sp+(((n-1)*sp)<<i))>>j)+sq;
                if(tempk<sq*n) break;
                else                {
                    if(firstk)                    {
                        k = tempk;
                        A = i;
                        B = j;
                        firstk = false;
                    }
                    else if(k > tempk)                    {
                        k = tempk;
                        A = i;
                        B = j;
                    }
                }
            }
        }
        printf("%lld %d %d\n", k , A, B);
    }
}

解6
#include <iostream>
using namespace std;
int main(){
    long long n,x,y,N,A,B,ansN,ansA,ansB;
    while(cin >> n >> x >> y){
        ansN = n*y <<10;
        for(A=0; A<32;A++){
            for(B=0;B<32;B++){
                N=(((n-1)*x +((n-1)*x<<A))>>B)+y;
                if(N>=n*y && N<ansN){
                    ansA = A;
                    ansB = B;
                    ansN = N;
                }
            }
        }
        cout << ansN << " " << ansA<<" "<<ansB<<"\n";
    }
    return 0;
}
